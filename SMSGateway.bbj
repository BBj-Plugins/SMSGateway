use com.basiscomponents.rest.MultipartPost

use org.apache.http.client.methods.HttpPost

use org.apache.http.HttpResponse
use org.apache.http.client.HttpClient
use org.apache.http.impl.client.HttpClientBuilder

use org.apache.http.client.utils.URIBuilder

use org.apache.http.client.entity.EntityBuilder
use org.apache.http.HttpEntity

use com.google.gson.JsonArray
use com.google.gson.JsonObject
use com.google.gson.JsonParser

use java.io.ByteArrayOutputStream

use org.apache.http.ssl.SSLContextBuilder
use org.apache.http.conn.ssl.NoopHostnameVerifier
use org.apache.http.conn.ssl.SSLConnectionSocketFactory

use ::SMSGateway/CustomTrustStrategy.bbj::CustomTrustStrategy

use java.security.cert.X509Certificate
use org.apache.http.conn.ssl.TrustStrategy

class public SMSGateway

    rem the JWT Access Token
    field private String jwt! 
    
    rem the gateway's address / IP
    field private BBjString address$
    
    field private Boolean ignoreCertErrors! = Boolean.FALSE
    
    method private SMSGateway()
    methodend
    
    rem /**
    rem  * Instantiates the SMSGateway object and immediately performs the authentication to get the JWT access token 
    rem  * 
    rem  * @param username$ The username to access the gateway's API (has to be enabled for API usage)
    rem  * @param password$ The pasword for authentication
    rem  * @param address$  The gateway's IP address or network name 
    rem  */
    method public SMSGateway(BBjString username$, BBjString password$, BBjString address$)
        #this!(username$, password$, address$, Boolean.FALSE)
    methodend
    
    rem /**
    rem  * Instantiates the SMSGateway object and immediately performs the authentication to get the JWT access token 
    rem  * 
    rem  * @param username$ The username to access the gateway's API (has to be enabled for API usage)
    rem  * @param password$ The pasword for authentication
    rem  * @param address$  The gateway's IP address or network name 
    rem  * @param ignoreCertErrors! If true, ignores all errors related to the gateway's SSL certificate beeing invalid 
    rem  */
    method public SMSGateway(BBjString username$, BBjString password$, BBjString address$, Boolean ignoreCertErrors!)
        #address$ = address$
        #ignoreCertErrors! = ignoreCertErrors!
        
        seterr SMSGateway_error_handler
    
        declare HttpClient client!
        client! = #getHttpClient()
        
        declare URIBuilder uriBuilder!
        uriBuilder! = new URIBuilder()
        uriBuilder!.setScheme("https").setHost(address$).setPath("/api/signin")

        declare HttpPost request!
        request! = new HttpPost(uriBuilder!.build())
        request!.setHeader("Content-Type", "application/json")
        request!.setHeader("Accept", "application/json")
        
        declare JsonObject payload!
        payload! = new JsonObject()
        payload!.addProperty("username", username$)
        payload!.addProperty("password", password$)
        
        entity! = EntityBuilder.create().setText(payload!.toString()).build()
        request!.setEntity(entity!)

        declare HttpResponse response!
        response! = client!.execute(request!)
        responseString! = #getResultAsString(response!)
        
        declare JsonObject responseObject!
        declare JsonParser parser!
        parser! = new JsonParser()
        responseObject! = parser!.parse(responseString!).getAsJsonObject()
        
        #jwt! = responseObject!.get("jwt").getAsString()
        
        methodret
        
        SMSGateway_error_handler:
            throw "Authentication Failure: Failed to obtain a valid JWT Token from the gateway. Error Message: " + errmes(-1) , 300
    methodend 
    
    rem /**
    rem  * Sends a SMS message via the gayteway.
    rem  *  
    rem  * @param to$ The recipient phone number's
    rem  * @param text$ The SMS text
    rem  */
    method public BBjString send(BBjString to$, BBjString text$)
        methodret #send(to$,text$,"sms")
    methodend
    
    rem /**
    rem  * Sends a SMS/telegram message via the gayteway.
    rem  *  
    rem  * @param to$ The recipient phone number's
    rem  * @param text$ The SMS text
    rem  * @param mode$ Either "sms" or "telegram" 
    rem  * 
    rem  * @return the gateway's JSON response 
    rem  */
    method public BBjString send(BBjString to$, BBjString text$, BBjString mode$)
        seterr send_error_handler
    
        declare HttpPost request!
        declare HttpResponse response!
        declare HttpClient client!

        client! = #getHttpClient()
        
        declare URIBuilder uriBuilder!
        uriBuilder! = new URIBuilder()
        uriBuilder!.setScheme("https").setHost(#address$).setPath("/api/messages")
        
        request! = new HttpPost(uriBuilder!.build())
        request!.setHeader("Content-Type", "application/json")
        request!.setHeader("Accept", "application/json")
        request!.setHeader("Authorization", "Bearer " + #jwt!)
        
        declare JsonObject recipient!
        declare JsonArray recipientArray!

        declare JsonObject body!
        body! = new JsonObject()
        
        recipientArray! = new JsonArray()
        recipient! = new JsonObject()
        recipient!.addProperty("to",to$)
        recipient!.addProperty("target","number")
        recipientArray!.add(recipient!)
        body!.add("recipients", recipientArray!)
        
        if mode$ <> "sms" AND mode$ <> "telegram" then
            throw "Invalid send mode. Only 'sms' and 'telegram' are valid", 300
        endif
       
        body!.addProperty("text", text$)
        body!.addProperty("provider", mode$)
        body!.addProperty("type","default")
        
        entity! = EntityBuilder.create().setText(body!.toString()).build()
        request!.setEntity(entity!)

        response! = client!.execute(request!)
        responseString! = #getResultAsString(response!)
         
        methodret responseString!
        
        send_error_handler:
            methodret "Error " + errmes(-1) 
    methodend
    
    method private HttpClient getHttpClient()
        declare HttpClientBuilder builder!
        declare HttpPost request!
        declare HttpResponse response!
        declare HttpClient client!

        builder! = HttpClientBuilder.create()
        builder!.useSystemProperties()
        
        if #ignoreCertErrors! then
            declare SSLContextBuilder sslContextBuilder!
            sslContextBuilder! = new SSLContextBuilder()
            sslContextBuilder!.loadTrustMaterial(null(), new CustomTrustStrategy())

            declare SSLConnectionSocketFactory socketFactory!
            socketFactory! = new SSLConnectionSocketFactory(sslContextBuilder!.build(), null(), null(), new NoopHostnameVerifier())
            builder!.setSSLSocketFactory(socketFactory!)
        endif
    
        methodret builder!.build()
    methodend
    
    rem /**
    rem  * Returns the result as String.
    rem  */
    method private String getResultAsString(HttpResponse response!)
        declare byte[] bytes!
        declare ByteArrayOutputStream outputStream!
        
        outputStream! = new ByteArrayOutputStream()
        bytes! = new byte[1024]
        inputStream! = response!.getEntity().getContent()
        while 1
            length = inputStream!.read(bytes!, err=*break)
            if length = -1 then
                break
            endif
            
            outputStream!.write(bytes!, 0, length)
        wend
        
        methodret outputStream!.toString()
    methodend

classend
